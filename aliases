# Unix

alias e="$EDITOR"
alias v="$VISUAL"

# browser shortcut

alias repoalias='firefox --new-window https://github.com/dontdoxxmeplz/aliases/edit/main/aliases'
alias repokb='firefox --new-window https://github.com/dontdoxxmeplz/knowledge-base/edit/main/README.md'
alias reporice='firefox --new-window https://github.com/dontdoxxmeplz/configer'

# Ansible
if command -v ansible &> /dev/null
then
    alias ansiblefacts='ansible localhost -m ansible.builtin.setup'
fi

# i3
alias i3config='vim ~/.config/i3/config'
alias i3conf='vim ~/.config/i3/config'

# ls specifics
if command -v urserver-start &> /dev/null
then
    alias urs='urserver-start'
fi

# ls specifics
if command -v exa &> /dev/null
then
    alias ls='exa -a'
fi

# cd commands
alias des='cd ~/Desktop'

# ls commands
alias ls="ls --color"
alias ll="ls -l"
alias ln="ln -v"
alias l='ls -l'
alias la='ls'
alias lla='ls -l'
alias lt='ls --tree'
alias ip='ip -c'
alias rm='rm -i'

# rm commands
alias ra="rm -rf"

# fonts
alias listfont-'fc-lis'

# mkdir commands
alias mkdir="mkdir -p"

# navi
if command -v navi &> /dev/null
then
alias navi="navi --fzf-overrides '--layout=reverse --with-nth 1,2 --border=rounded --margin 5% --padding 3%'"
alias n="navi"
alias nav="navi"
fi

# kitty
if [ -x "$(command -v kitty)" ]; then alias icat="kitty +kitten icat"; fi

# Dos2unix recursive
if [ -x "$(command -v dos2unix)" ]; then alias d2u='find . -type f -print0 | xargs -0 dos2unix'; fi

# Ranger
if [ -x "$(command -v ranger)" ]; then alias r='ranger .'; fi

# Minikube
if [ -x "$(command -v minikube)" ]; then alias minikuberestart="minikube delete && minikube start"; fi

# Print all hostnames
alias hostname='hostname -A'

# Grant execution right to all .sh files inside the current directory recursively
alias rexec='find . -type f -iname "*.sh" -exec chmod +x {} \;'

# Open atom in the current directory
if ! [ -x "$(command -v atom)" ]; then alias a='atom .'; fi

if command -v nvim &> /dev/null
then
alias vim='vim'
alias vi='vim'
alias v='vim'
fi

# History grep text
alias gh='history|grep'

# peek recorder
if ! [ -x "$(command -v peek)" ]; then alias peek='peek --display=$DISPLAY &'; fi

# Python3 shortcut
alias p3='python3'

# Cat a file and put the content in the clipboard
alias caty='xclip -sel c <' # copy cotent of the file in clipboard, ex : caty input.txt

# Restart vmtool service


alias rvm='sudo systemctl restart vmtoolsd.service'

# Mullvad
if command -v openvpn &> /dev/null
then
alias mullvad='sudo openvpn --config'
alias mulvad='sudo openvpn --config'
alias mulv='sudo openvpn --config'
alias muvad='sudo openvpn --config'
fi

if command -v kb &> /dev/null
then
alias kbl="kb list"
alias kbe="kb edit"
alias kba="kb add"
alias kbv="kb view"
alias kbd="kb delete --id"
alias kbg="kb grep"
alias kbt="kb list --tags"
fi

# Vagrant
if command -v vagrant &> /dev/null
then
alias va='vagrant'
alias vadf='vagrant destroy -f'
alias vau='vagrant up'
alias vaup='vagrant up --provision'
fi

# Git
if command -v git &> /dev/null
then
alias cg='cd `git rev-parse --show-toplevel`'
alias gst='git status'
alias startgit='cd `git rev-parse --show-toplevel` && git checkout master && git pull'
fi

# Docker
if command -v docker &> /dev/null
then
alias dr='docker run -it '
alias dok='docker'
alias dokb='docker build'
alias dokr='docker run'
alias doklia='docker image ls --all'
alias dormi='docker rmi -f $(docker images -a -q)'
alias dormc='docker rm -vf $(docker ps -a -q)'
alias dora='docker system prune -f || true && docker rm -vf $(docker ps -a -q) || true && docker rmi -f $(docker images -a -q) || true &&  docker system prune -f || true'
fi

if command -v urxvt &> /dev/null
then
alias rxvt-unicode='urxvt'
fi

if command -v flux &> /dev/null
then
alias frh='flux reconcile helmrelease'
alias frs='flux reconcile source'
alias frk='flux reconcile kustomization'
alias frall='flux reconcile source git flux-system && flux reconcile kustomization flux-system applications core --with-source'
alias fgall='flux get all'
alias flog='flux logs'
fi

# Kubernetes
if command -v kubectl &> /dev/null
then

if [ -x "$(command -v knsdel)" ]; then alias kdelfns='knsdel' && alias kdelnsf='knsdel' && alias kdelnsforce='knsdel'; fi
alias k='kubectl'
alias kconf='export KUBECONFIG="$(pwd)/kube_config_cluster.yml"'
alias kgsf='kubectl get statefulset'
alias kgsec='kubectl get secret'
alias kgseca='kubectl get secret -A'
alias kgs='kubectl get service'
alias kgsc='kubectl get storageclass'
alias kgea='kubectl get events -A'
alias kgeall='kubectl get events -A'
alias kge='kubectl get events'
alias kgpva='kubectl get pv -A'
alias kgpvca='kubectl get pvc -A'
alias kns='kubens'
alias kgsca='kubectl get storageclass -A'
alias kgss='kubectl get sealedsecret -A'
alias kdss='kubectl describe sealedsecret -A'
alias kggr='kubectl get gitrepository -A'
alias kdgr='kubectl describe gitrepository -A'
alias kghc='kubectl get helmcharts -A'
alias kdhc='kubectl describe helmcharts -A'
alias kghrl='kubectl get helmrelease -A'
alias kdhrl='kubectl describe helmrelease -A'
alias kghr='kubectl get helmrepository -A'
alias kdhr='kubectl describe helmrepository -A'
alias kgir='kubectl get imagerepository -A'
alias kdir='kubectl describe imagerepository -A'
alias kdel='kubectl delete'
alias kginr='kubectl get ingressroute -A'
alias kdinr='kubectl describe ingressroute -A'
alias kgic='kubectl get ingressclass -A'
alias kdic='kubectl describe ingressclass -A'
alias kdelp='kubectl delete pod'
alias kdelns='kubectl delete namespace'
alias kdelsf='kubectl delete statefulset'
alias kgpa='kubectl get pods -A'
alias kgsa='kubectl get service -A'
alias kgnsa='kubectl get ns -A'
alias kgdep='kubectl get deploy'
alias kgda='kubectl get deploy -A'
alias kgia='kubectl get ingress -A'
alias kgca='kubectl get cert -A'
alias kdp='kubectl describe pods'
alias kdsf='kubectl describe statefulset'
alias kdd='kubectl describe deploy'
alias kds='kubectl describe service'
alias kdsa='kubectl describe service --all-namespaces'
alias kdns='kubectl describe namespace'
alias kdi='kubectl describe ingress'
alias kx='kubectx'
alias kkr='kubectl krew'
alias ksys='kubectl --namespace=kube-system'
alias kin='kubectl ingress-nginx'
alias ka='kubectl apply --recursive -f'
alias klsa='kubectl get all -A'
alias kga='kubectl get all'
alias kgall='kubectl get all -A'
alias kak='kubectl apply -k'
alias kps='kubectl patch svc'
alias kk='kubectl kustomize'
alias kdeldep='kubectl delete deployment'
alias kex='kubectl exec -i -t'
alias kl='kubectl logs'
alias klop='kubectl logs -f -p'
alias kp='kubectl proxy'
alias kpf='kubectl port-forward'
alias kg='kubectl get'
alias kd='kubectl describe'
alias krm='kubectl delete'
alias kgpo='kubectl get pods'
alias kdpo='kubectl describe pods'
alias kgno='kubectl get nodes'
alias kgna='kubectl get nodes -A'
alias kdno='kubectl describe nodes'
alias kdnoa='kubectl describe nodes -A'
alias kgns='kubectl get namespaces'
alias kdns='kubectl describe namespaces'
alias kglb='kubectl get --show-labels'
alias kwnsa='kubectl get --all-namespaces --watch'
alias kexn='kubectl exec -i -t --namespace'
alias klon='kubectl logs -f --namespace'
alias kpfn='kubectl port-forward --namespace'
alias kgn='kubectl get --namespace'
alias kdn='kubectl describe --namespace'
alias kgsecn='kubectl get secret --namespace'
alias kdsecn='kubectl describe secret --namespace'
alias kall='kubectl get -o=wide -A'
alias kw='kubectl get --watch --namespace'
alias knot='kubectl node top'
alias kdu='kubectl describe user'
alias kdua='kubectl describe user -A'
alias kgu='kubectl get user'
alias kdvo='kubectl describe vhost'
alias kgvo='kubectl get vhost'
alias kgvoa='kubectl get vhost -A'
alias kgperm='kubectl get Permission'
alias kgperma='kubectl get Permission -A'
alias kgnp='kubectl get NetworkPolicy'
alias kgnpa='kubectl get NetworkPolicy -A'
alias kgpol='kubectl get Policy'
alias kdpol='kubectl describe Policy'
alias kdpola='kubectl describe Policy -A'
alias kgpola='kubectl get Policy -A'
alias kdvoa='kubectl describe vhost -A'
alias kgpv='kubectl get pv'
alias kgpva='kubectl get pv -A'
alias kgpvc='kubectl get pvc'
alias kgpvca='kubectl get pvc -A'
alias kdpvc='kubectl describe pvc'
alias kdpvca='kubectl describe pvc -A'
alias kgua='kubectl get user -A'
alias kgep='kubectl get endpoints'
alias kgepa='kubectl get endpoints -A'
alias kdep='kubectl describe endpoints'
alias kdepa='kubectl describe endpoints -A'
alias kgser='kubectl get service'
alias kgsera='kubectl get service -A'
alias kdser='kubectl describe service'
alias kdsera='kubectl describe service -A'
alias kdc='kubectl describe cert'
alias kdca='kubectl describe cert -A'
alias kgcm='kubectl get configmap'
alias kgcma='kubectl get configmap -A'
alias kdcm='kubectl describe configmap'
alias kdcma='kubectl describe configmap -A'
alias kgcia='kubectl get ClusterIssuer -A'
alias kgci='kubectl get ClusterIssuer'
alias kdcia='kubectl describe ClusterIssuer -A'
alias kdci='kubectl describe ClusterIssuer'
alias kgexa='kubectl get exchange -A'
alias kgex='kubectl get exchange'
alias kdexa='kubectl describe exchange -A'
alias kdex='kubectl describe exchange'
fi

SAVEIFS=$IFS
IFS="$(printf '\n\t')"
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar) 
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar) unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip) unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.apk|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace) unace x ./"$n"      ;;
            *.zpaq)      zpaq x ./"$n"      ;;
            *.arc)       arc e ./"$n"       ;;
            *.cso)       ciso 0 ./"$n" ./"$n.iso" && \
                              extract $n.iso && \rm -f $n ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}
IFS=$SAVEIFS
